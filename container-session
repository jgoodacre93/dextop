#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="08-17-2024"

# usage ////////////////////////////////////////////////////////////////////////

while (($#))
do
	case "${1}"
	in
		-o|--start)
			option="start"
			display="${2}"

			shift
		;;

		-x|--stop)
			option="stop"
			display="${2}"

			shift
		;;

		-n|--new)
			option="new"
		;;

		-v|--view)
			option="view"
		;;

		-a|--application)
			option="application"
			application="${2}"

			shift
		;;

		-u|--username)
			option="username"
			user_name="${2}"

			shift
		;;

		-r|--root)
			option="root"
			root_filesystem="${2}"

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -u [User Name] | -a [Application] | -n [Selection] | [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-o, --start          Start display session server."
			echo -e "                     [ x11 ] [ Default ]"
			echo
			echo -e "-x, --stop           Stop display session server."
			echo
			echo -e "-n, --new            Generate new display session geometry selection."
			echo -e "-v, --view           Reload display viewer application window."
			echo
			echo -e "-a, --application    Specify application to start on session login."
			echo
			echo -e "-u, --username       Specify user name for session login."
			echo
			echo -e "-r, --root           Specify root filesystem directory."
			echo
			echo -e "-h, --help           Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

			"")
				# handle empty argument:
				# use default values specified in script

				:
			;;

		*)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -u [User Name] | -a [Application] | -n [Selection] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;

	esac

	shift
done

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

# reference session viewer activity calls for known android applications:

# Termux:x11:    com.termux.x11/.MainActivity

termux_x11_activity="com.termux.x11/.MainActivity"
termux_x11_activity_stop="com.termux.x11.ACTION_STOP"

# defaults /////////////////////////////////////////////////////////////////////

if [ -z "${display}" ]
then
	display="x11"
fi

if [ -z "${environment}" ]
then
	environement="$(cat ${HOME}/.dextop/dextop-environment)"
fi

if [ -z "${session}" ]
then
	session="$(cat ${HOME}/.dextop/dextop-session)"
fi

if [ -z "${LOCALHOST}" ]
then
	LOCALHOST="127.0.0.1"
fi

if [ -z "${ADDRESS}" ]
then
	ADDRESS="${LOCALHOST}"
fi

if [ -z "${PORT}" ]
then
	PORT="590${DISPLAY_NUMBER}"
fi

if [ -z "${TERM}" ]
then
	TERM="xterm-256color"
fi

if [ -z "${TMPDIR}" ]
then
	TERM="${TMPDIR}"
fi

if [ -z "${COLORTERM}" ]
then
	COLORTERM="truecolor"
fi

if [ -z "${LANG}" ]
then
	LANG="C.UTF-8"
fi

if [ -z "${SHELL}" ]
then
	SHELL="/bin/bash"
fi

if [ -z "${DISPLAY}" ]
then
	DISPLAY=":0"
fi

if [ -z "${DISPLAY_NUMBER}" ]
then
	DISPLAY_NUMBER="${DISPLAY/:/}"
fi

if [ -z "${DISPLAY_DRIVER}" ]
then
	DISPLAY_DRIVER="virpipe"
fi

if [ -z "${GALLIUM_DRIVER}" ]
then
	GALLIUM_DRIVER="${DISPLAY_DRIVER}"
fi

if [ -f /etc/os-release ]
then
	. /etc/os-release

	name="${NAME}"
fi

# exports //////////////////////////////////////////////////////////////////////

export DISPLAY="${DISPLAY}"

export GALLIUM_DRIVER="${DISPLAY_DRIVER}"

# functions ////////////////////////////////////////////////////////////////////

container_root () {

	# set container root directory

	CONTAINER_ROOT=("${PREFIX}"/cnt/*/*)

	# single container

	if [[ ${#CONTAINER_ROOT[@]} -eq 1 ]]
	then
		CONTAINER_ROOT=("${PREFIX}"/cnt/*/*)
	fi

	# multiple containers:
	# parse container directories

	if [[ ${#CONTAINER_ROOT[@]} -ge 2 ]]
	then
		for distribution in "${PREFIX}"/cnt/*
		do
			for version in "${distribution}"/*
			do
				distribution_name=$(basename $distribution)

				distribution_version=$(basename $version)

				containers+=($distribution_name $distribution_version)
			done
		done

		# set padding for uniform output

		pad_length=10

		# continue list using array selection of suppported values

		for (( i=0 ; i<${#containers[@]} ; i+=2 ))
		do
			name="${containers[$i]}"
			version="${containers[$i+1]}"
			container="${name} ${version}"

			number=$((($i/2) + 1))

			if (( $i/2 >= 0 && $i/2 <= 8 ))
			then
				# handle number spacing for entries 1-9

				printf '      [  %s ] %s ' ${number} ${name}
			else
				# handle number spacing for entries 10+

				printf '      [ %s ] %s ' ${number} ${name}
			fi

			printf '%*s' $((pad_length - ${#name}))
			printf '%s\n' ${version}
		done

		printf '\n'

		container_handle
	fi
}

container_handle () {

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	frobulator_return=()

	if [ -f "${HOME}"/.dextop/selection ]
	then
		selection=$(cat "${HOME}"/.dextop/selection)
	else
		frobulator.input ${values_list[@]}
	fi

	eval ${frobulator_return[@]}

	# check selection input against selection list

	while true
	do
		# range check:
		# selection input must be in provided range and an integer

		if [[ "${selection}" -lt 1           ]] || \
		   [[ "${selection}" -gt "${number}" ]] || \
		   [[ ! "${selection}" =~ ^[0-9]+$   ]]
		then
			echo
			frobulator.err "Invalid selection:"
			echo

			frobulator.wrn "Select container [ 1 - ${number} ]"
			echo

			frobulator.ipt "Selection:"

			frobulator.read selection
		else
			break
		fi
	done

	distribution_name="${name}"
	distribution_version="${version}"

	CONTAINER_ROOT="${PREFIX}"/cnt/"${distribution_name}"/"${distribution_version}"
}

container_input () {

	if [ -d "${root_filesystem}" ]
	then
		CONTAINER_ROOT="${root_filesystem}"

		frobulator.scs "Container location found."
		echo

		frobulator.inf "Loading" "[ ${CONTAINER_ROOT} ]"
		echo
	else
		frobulator.err "Container location not found."
		echo

		frobulator.ipt "Select one of the following containers:"
		echo

		container_handle
	fi
}

container_user () {

	# authentication

	frobulator.fwd "Authenticating${marker_elp}"
	echo

	# verify user existence:
	# loop through container's /etc/passwd file and make sure 'user' exists
	# source environment variables when 'user' corresponds to 'username'
	# default to 'root' if 'username' is invalid, is not specified or does not exist

	last_entry="$(tail -n 1 "${CONTAINER_ROOT}"/etc/passwd)"

	while read -r entry
	do
		IFS=':'

		read USER _ USER_ID GROUP_ID GECOS HOME SHELL <<< "${entry}"

		IFS=','

		read FULL_NAME ROOM_NUMBER WORK_PHONE HOME_PHONE USER_EMAIL <<< "${GECOS}"

		# reset IFS

		IFS=' '

		# verify login options and parameters

		# no user name specified

		if [[ -z "${user_name}" ]]
		then
			user_name="root"

			USER="root"

			USER_ID="0"
			GROUP_ID="0"

			UID="${USER_ID}"
			GID="${GROUP_ID}"

			if [ -d "${CONTAINER_ROOT}"/root ]
			then
				HOME="/root"
			else
				HOME="/"
			fi

			frobulator.wrn "No user name - Defaulting" "[ '${user_name}' ]"
			echo

			break
		fi

		# valid user name found

		if [[ "${user_name}" == "${USER}" ]]
		then
			USER="${user_name}"

			if [[ "${user_name}" == "root" ]]
			then
				frobulator.wrn "Valid user name - Superuser" "[ '${user_name}' ]"
				echo
			else
				frobulator.scs "Valid user name - Accessing" "[ '${user_name}' ]"
				echo
			fi

			break
		fi

		# user naem not found

		if [[ "${entry}" == "${last_entry}" ]]
		then

			frobulator.err "Invalid user name - Aborting" "[ '${user_name}' ]"
			echo

			exit 1
		fi

	done < "${CONTAINER_ROOT}"/etc/passwd
}

container_session () {

	# load session settings

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# setup 'proot' command arguments

	unset session_command

	session_command+="proot"
	session_command+=" --kill-on-exit"
	session_command+=" --link2symlink"
	session_command+=" --rootfs=${CONTAINER_ROOT}"
	session_command+=" --change-id=${USER_ID}:${GROUP_ID}"
	session_command+=" --pwd=${HOME}"

	# android 10+ requirements

	[ -d "/apex" ]                                && intent_command+=" --bind=/apex:/apex"
	[ -e "/linkerconfig/ld.config.txt" ]          && intent_command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"

	# android requirements

	[ -d "/data" ]                                   && session_command+=" --bind=/data:/data"
	[ -d "/dev" ]                                    && session_command+=" --bind=/dev:/dev"
	[ -e "/dev/urandom" ]                            && session_command+=" --bind=/dev/urandom:/dev/random"
	[ -d "/proc" ]                                   && session_command+=" --bind=/proc:/proc"
	[ -d "/proc/self/fd" ]                           && session_command+=" --bind=/proc/self/fd:/dev/fd"
	[ -e "/proc/self/fd/0" ]                         && session_command+=" --bind=/proc/self/fd/0:/dev/stdin"
	[ -e "/proc/self/fd/1" ]                         && session_command+=" --bind=/proc/self/fd/1:/dev/stdout"
	[ -e "/proc/self/fd/2" ]                         && session_command+=" --bind=/proc/self/fd/2:/dev/stderr"
	[ -d "/storage" ]                                && session_command+=" --bind=/storage:/storage"
	[ -d "/sys" ]                                    && session_command+=" --bind=/sys:/sys"
	[ -d "/system" ]                                 && session_command+=" --bind=/system:/system"
	[ -d "/vendor" ]                                 && session_command+=" --bind=/vendor:/vendor"

	# transient directories

	[ -d "${PREFIX%/*}"/home ]                       && session_command+=" --bind=${PREFIX%/*}/home:${HOME}"
	[ -d "${PREFIX}"/tmp ]                           && session_command+=" --bind=${PREFIX}/tmp:/tmp"

	[ -d "${PREFIX}"/media/[aA]ndroid ]              && session_command+=" --bind=${PREFIX}/media/android:/media/android"
	[ -d "${PREFIX}"/media/[aA]ndroid/Documents ]    && session_command+=" --bind=${PREFIX}/media/android/Documents:/home/${USER}/Documents"
	[ -d "${PREFIX}"/media/[aA]ndroid/Downloads ]    && session_command+=" --bind=${PREFIX}/media/android/Downloads:/home/${USER}/Documents"
	[ -d "${PREFIX}"/media/[aA]ndroid/Music ]        && session_command+=" --bind=${PREFIX}/media/android/Music:/home/${USER}/Music"
	[ -d "${PREFIX}"/media/[aA]ndroid/Pictures ]     && session_command+=" --bind=${PREFIX}/media/android/Pictures:/home/${USER}/Pictures"
	[ -d "${PREFIX}"/media/[aA]ndroid/Public ]       && session_command+=" --bind=${PREFIX}/media/android/Public:/home/${USER}/Public"
	[ -d "${PREFIX}"/media/[aA]ndroid/Templates ]    && session_command+=" --bind=${PREFIX}/media/android/Templates:/home/${USER}/Templates"
	[ -d "${PREFIX}"/media/[aA]ndroid/Videos ]       && session_command+=" --bind=${PREFIX}/media/android/Videos:/home/${USER}/Videos"
	[ -d "${PREFIX}"/media/[eE]xternal ]             && session_command+=" --bind=${PREFIX}/media/external:/media/external"
	[ -d "${PREFIX}"/media/[iI]nternal ]             && session_command+=" --bind=${PREFIX}/media/internal:/media/internal"
	[ -d "${PREFIX}"/media/[iI]nternal/Documents ]   && session_command+=" --bind=${PREFIX}/media/internal/Documents:/home/${USER}/Documents"
	[ -d "${PREFIX}"/media/[iI]nternal/Downloads ]   && session_command+=" --bind=${PREFIX}/media/internal/Downloads:/home/${USER}/Documents"
	[ -d "${PREFIX}"/media/[iI]nternal/Music ]       && session_command+=" --bind=${PREFIX}/media/internal/Music:/home/${USER}/Music"
	[ -d "${PREFIX}"/media/[iI]nternal/Pictures ]    && session_command+=" --bind=${PREFIX}/media/internal/Pictures:/home/${USER}/Pictures"
	[ -d "${PREFIX}"/media/[iI]nternal/Public ]      && session_command+=" --bind=${PREFIX}/media/internal/Public:/home/${USER}/Public"
	[ -d "${PREFIX}"/media/[iI]nternal/Templates ]   && session_command+=" --bind=${PREFIX}/media/internal/Templates:/home/${USER}/Templates"
	[ -d "${PREFIX}"/media/[iI]nternal/Videos ]      && session_command+=" --bind=${PREFIX}/media/internal/Videos:/home/${USER}/Videos"


	# environemnt

	session_command+=" env"
	session_command+=" --ignore-environment"
	session_command+=" ANDROID_ART_ROOT=${ANDROID_ART_ROOT}"
	session_command+=" ANDROID_DATA=${ANDROID_DATA}"
	session_command+=" ANDROID_I18N_ROOT=${ANDROID_I18N_ROOT}"
	session_command+=" ANDROID_ROOT=${ANDROID_ROOT}"
	session_command+=" ANDROID_RUNTIME_ROOT=${ANDROID_RUNTIME_ROOT}"
	session_command+=" ANDROID_TZDATA_ROOT=${ANDROID_TZDATA_ROOT}"
	session_command+=" BOOTCLASSPATH=${BOOTCLASSPATH}"
	session_command+=" DEX2OATBOOTCLASSPATH=${DEX2OATBOOTCLASSPATH}"

	# termux

	session_command+=" PREFIX=${PREFIX}"
	session_command+=" TERMUX_BINARIES=${PREFIX}/bin"

	# container

	session_command+=" COLORTERM=${COLORTERM}"
	session_command+=" DISPLAY=${DISPLAY}"
	session_command+=" DISPLAY_DRIVER=${DISPLAY_DRIVER}"
	session_command+=" HOME=${HOME}"
	session_command+=" LANG=${LANG}"
	session_command+=" LOCALHOST=${LOCALHOST}"
	session_command+=" PATH=${PATH}:${TERMUX_BINARIES}"
	session_command+=" SHELL=${SHELL}"
	session_command+=" TERM=${TERM}"
	session_command+=" TMPDIR=${TMPDIR}"
	session_command+=" USER=${USER}"
	session_command+=" XDG_RUNTIME_DIR=/run/user/${USER_ID}"
	session_command+=" XDG_CONFIG_DIRS=/etc/xdg"
	session_command+=" XDG_CACHE_HOME=${HOME}/.cache"
	session_command+=" XDG_CONFIG_HOME=${HOME}/.config"
	session_command+=" XDG_DATA_HOME=${HOME}/.local/share"
	session_command+=" XDG_STATE_HOME=${HOME}/.local/state"
	session_command+=" XDG_DATA_DIRS=/usr/local/share:/usr/share"
	session_command+=" XAUTHORITY=${XDG_RUNTIME_DIR}/Xauthority"

	# command

	session_command+=" ${SHELL}"
	session_command+=" --login"

	# execute 'proot'

	${session_command}
}

server_intent () {

	unset load_command

	if [[ "${display}" = [xX][1][1] ]]
	then

		unset load_command

		if [[ $(pidof virgl*) ]]
		then
			:
		else
			load_command+="virgl_test_server_android"

			${load_command} > "${sink}" 2>&1 &
		fi

		unset load_command

		if [[ $(pidof app_process / com.termux.x11.Loader) ]]
		then
			:
		else
			load_command+="termux-x11"

			${load_command} > "${sink}" 2>&1 &
		fi
	fi
}

display_intent () {

	frobulator.fwd "Generating display${marker_elp}"
	echo

	if [[ "${display}" = [xX][1][1] ]]
	then
		display_activity="${termux_x11_activity}"

		# start termux:x11 intent

		unset intent_command

		intent_command+="am start"
		intent_command+=" --user 0"
		intent_command+=" -n ${display_activity}"

		frobulator.silence "${intent_command}"
	fi
}

display_view () {

	frobulator.fwd "Opening display${marker_elp}"
	echo

	if [[ "${display}" = [xX][1][1] ]]
	then
		display_activity="${termux_x11_activity}"

		unset intent_command

		intent_command+="am start"
		intent_command+=" --user 0"
		intent_command+=" -n ${display_activity}"

		frobulator.silence "${intent_command}"
	fi
}

display_interface () {

	if [[ $(pidof "${session}") ]]
	then
		:
	else
		if [[ $(command -v "${session}") ]]
		then
			frobulator.silence "${session} &"
		fi
	fi

	frobulator.fwd "Loading desktop interface${marker_elp}"
	echo
}

display_load () {

	# start display server

	frobulator.fwd "Starting display server${marker_elp}"
	echo

	server_intent

	# connection to x11vnc is very fast:
	# wait for process to settle before launching vnc viewer

	sleep 1

	display_intent
}

display_start () {

	if [[ "${display}" = [xX][1][1] ]]
	then
		display_view
	fi

	# start display session

	display_load
}

display_new () {

	# start display session

	display_load
}

display_stop () {

	# look for corresponding server process:
	# handle and stop display server and purge runtime files

	if [[ $(pidof app_process / com.termux.x11.Loader) ]]
	then
		# x11

		kill -9 $(pidof app_process / com.termux.x11.Loader) > "${sink}" 2>&1 &

		frobulator.process "Stopping display loader"

	elif [[ $(pidof com.termux.x11) ]]
	then
		# x11

		display_activity="${termux_x11_activity_stop}"

		unset intent_command

		intent_command+="am broadcast"
		intent_command+=" --user 0"
		intent_command+=" -a ${display_activity}"

		frobulator.silence "${intent_command}" &

		frobulator.process "Stopping display viewer"

		if [[ $(pidof virgl_test_server_android) ]]
		then
			# x11

			kill -9 $(pidof virgl_test_server_android) > "${sink}" 2>&1 &

			frobulator.process "Stopping display server"
		fi

	else
		frobulator.wrn "No active display process detected."
		echo

		frobulator.fwd "Exiting${marker_elp}"
		echo
	fi
}

display_list () {

	if [[ "${display}" = [xX][1][1] ]]
	then
		display_server="com.termux.x11"

		display_format="native"
		display_geometry="native"
		display_display=${DISPLAY}
		display_process=$(pidof $(echo "${display_server}"))
		display_port="default"
	fi

	if [[ $(pidof "${display_server}") ]]
	then
		frobulator.fwd "Listing session details${marker_elp}"
		echo

		display_format="${display_format}"
		display_geometry="${display_geometry}"
		display_display="${display_display}"
		display_process="${display_process}"
		display_port="${display_port}"
	else
		frobulator.wrn "No active servers detected."
		echo

		empty="N/A"

		display_format="${empty}"
		display_geometry="${empty}"
		display_display="${empty}"
		display_process="${empty}"
		display_port="${empty}"
	fi

	frobulator.inf "Format"   "[ ${display_format} ]"
	frobulator.inf "Geometry" "[ ${display_geometry} ]"
	frobulator.inf "Display"  "[ ${display_display} ]"
	frobulator.inf "Process"  "[ ${display_process} ]"
	frobulator.inf "Port"     "[ ${display_port} ]"
	echo
}

application_handle () {

	# handle application launch

	if [[ $(command -v "${application}") ]]
	then
		# start display session

		display_start

		# load application

		${application} &
	else
		frobulator.err "Application not found" "[ "${application}" ]"
		echo

		if [[ $(command -v zenity) ]]
		then
			zenity			 											\
				--warning												\
					--width="200"										\
					--window-icon="${HOME}/.dextop/dextop.svg"			\
					--text="Application '${application}' not found." 2> "${sink}" &
		fi
	fi
}

if [ "${option}" = "start" ]
then
	# check server type selection

	if [[ "${display}" = [xX][1][1] ]]
	then
		# start display session

		display_start

		# start interface / desktop environment / desktop session

		display_interface

		# start display viewing application

		display_intent

	else
		frobulator.err "Unknown display server selection" "[ ${display} ]"
		echo

		frobulator.wrn "Available display server options" "[ 'x11' ]"
		echo

		frobulator.inf "Start session using available server options."
		echo

		exit 1
	fi
fi

if [ "${option}" = "stop" ]
then
	# stop display session

	display_stop
fi

if [ "${option}" = "new" ]
then
	# start vnc session with new selection

	display_new
fi

if [ "${option}" = "view" ]
then
	# reload display viewer application window:
	# some activity launches can be buggy

	display_view
fi

if [ "${option}" = "application" ]
then
	# validate and start selected application

	application_handle
fi

if [ "${option}" = "username" ]
then
	# validate root filesystem

	container_root

	# validate username

	container_user

	# start container session

	container_session
fi

if [ "${option}" = "root" ]
then
	# handle manual container location input

	container_input

	# validate root filesystem

	container_root

	# validate username

	container_user

	# start container session

	container_session
fi
