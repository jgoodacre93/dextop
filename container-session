#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="01-01-2025"

# usage ////////////////////////////////////////////////////////////////////////

while (($#))
do
	case "${1}"
	in
		-o|--start)
			option="start"
			display="${2}"

			shift
		;;

		-x|--stop)
			option="stop"
			display="${2}"

			shift
		;;

		-l|--list)
			option="list"
		;;

		-p|--password)
			option="password"
		;;

		-u|--username)
			option="username"
			user_name="${2}"

			shift
		;;

		-d|--directory)
			option="directory"
			container_directory="${2}"

			shift
		;;

		-f|--focus)
			option="focus"
			application="${2}"

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -x | -l | -u [User Name] | -d [Directory] | -f [Application] | [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-o, --start        Start display session server."
			echo -e "                   [ vnc ]"
			echo -e "                   [ x11 ] [ Default ]"
			echo
			echo -e "-x, --stop         Stop display session server."
			echo
			echo -e "-l, --list         List display server information and parameters."
			echo
			echo -e "-p, --password     Generate display session password. [ vnc ]"
			echo
			echo -e "-u, --username     Specify user name for session login."
			echo
			echo -e "-d, --directory    Specify container base directory as /path/to/base/directory containing /distribution/version"
			echo
			echo -e "-f, --focus        Specify application to load."
			echo
			echo -e "-h, --help         Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

			"")
				# handle empty argument:
				# use default values specified in script

				:
			;;

		*)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -x | -l | -u [User Name] | -d [Directory] | -f [Application] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;

	esac

	shift

done

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

TERMUX_X11_APPLICATION="com.termux.x11"
TERMUX_X11_SERVER="termux-x11"
TERMUX_X11_DRIVER="virpipe"
TERMUX_X11_ACCELERATOR="virgl_test_server_android"

termux_x11_activity="com.termux.x11/.MainActivity"
termux_x11_activity_stop="com.termux.x11.ACTION_STOP"

termux_x11_process="app_process -Xnoimage-dextooat / com.termux.x11.Loader"

# reference vnc session viewer activity calls for known android applications:

# FreebVNC:      com.iiordanov.freebVNC/com.iiordanov.bVNC.RemoteCanvasActivity
# RealVNC:       com.realvnc.viewer.android/.app.DesktopActivity
# Remotix:       com.nulana.android.remotix/.Viewer

free_vnc_activity="com.iiordanov.freebVNC/com.iiordanov.bVNC.RemoteCanvasActivity"
real_vnc_activity="com.realvnc.viewer.android/.app.DesktopActivity"
remotix_vnc_activity="com.nulana.android.remotix/.Viewer"

vnc_activity="${remotix_vnc_activity}"

# defaults /////////////////////////////////////////////////////////////////////

if [ -z "${display}" ]
then
	display="x11"
fi

if [ -z "${COLORTERM}" ]
then
	COLORTERM="truecolor"
fi

if [ -z "${TERM}" ]
then
	TERM="xterm-256color"
fi

if [ -z "${TMPDIR}" ]
then
	TMPDIR="${TMPDIR}"
fi

if [ -z "${LANG}" ]
then
	LANG="${LANG}"
fi

if [ -z "${LOCALHOST}" ]
then
	LOCALHOST="127.0.0.1"
fi

if [ -z "${ADDRESS}" ]
then
	ADDRESS="${LOCALHOST}"
fi

if [ -z "${PORT}" ]
then
	PORT="590${DISPLAY_NUMBER}"
fi

if [ -z "${SHELL}" ]
then
	SHELL="/bin/bash"
fi

if [ -z "${DISPLAY}" ]
then
	DISPLAY=":0"
fi

if [ -z "${DISPLAY_NUMBER}" ]
then
	DISPLAY_NUMBER="${DISPLAY/:/}"
fi

if [ -z "${user_name}" ]
then
	user_name="termux"
fi

if [ -f /etc/os-release ]
then
	. /etc/os-release

	name="${ID}"
	version="${VERSION_ID}"
fi

# exports //////////////////////////////////////////////////////////////////////

export TERMUX_X11_APPLICATION="${TERMUX_X11_APPLICATION}"
export TERMUX_X11_SERVER="${TERMUX_X11_SERVER}"
export TERMUX_X11_DRIVER="${TERMUX_X11_DRIVER}"
export TERMUX_X11_ACCELERATOR="${TERMUX_X11_ACCELERATOR}"

# functions ////////////////////////////////////////////////////////////////////

container_parse () {

	# parse container directories

	for distribution in "${CONTAINER_BASE}"/*
	do
		for version in "${distribution}"/*
		do
			distribution_name=$(basename ${distribution})

			distribution_version=$(basename ${version})

			containers+=(${distribution_name} ${distribution_version})
		done
	done

	if [[ ${#CONTAINER_ROOT[@]} -eq 1 ]]
	then
		distribution_name="${distribution_name}"
		distribution_version="${distribution_version}"

		frobulator.inf "Single container found" "[ ${distribution_name} // ${distribution_version} ]"
		echo

		frobulator.fwd "Proceeding${marker_elp}"
		echo
	fi

	if [[ ${#CONTAINER_ROOT[@]} -ge 2 ]]
	then
		frobulator.ipt "Select one of the following containers:"
		echo

		# set padding for uniform output

		pad_length=10

		# normalize output

		echo

		# continue list using array selection of suppported values

		for (( i=0 ; i<${#containers[@]} ; i+=2 ))
		do
			number=$(((${i}/2) + 1))

			name="${containers[${i}]}"
			version="${containers[${i}+1]}"

			indent="${marker_tab}"

			if [ ${#version} -le 2 ]
			then
				indent+="${marker_tab}"
			fi

			if (( ${i}/2 >= 0 && ${i}/2 <= 8 ))
			then
				# handle number spacing for entries 1-9

				number=" ${number}"
			else
				# handle number spacing for entries 10+

				number="${number}"
			fi

			# list container entries

			echo "${marker_nul}" "[ ${number} ]" "${name}" "${version}"

		done

		echo

		# values #

		values_list=(
			selection
		)

		# handle user input for values_list

		eval ${frobulator_return[@]}

		frobulator.ipt "Selection:"

		frobulator.read selection

		# integer check:
		# handle numerical selection

		while [[ "${selection}" -lt 1           ]] || \
			  [[ "${selection}" -gt "${number}" ]] || \
			  [[ ! "${selection}" =~ ^[0-9]+$   ]]
		do
			echo
			frobulator.err "Invalid selection:"
			echo

			frobulator.wrn "Select container [ 1 - ${number} ]"
			echo

			frobulator.ipt "Selection:"

			frobulator.read selection

		done

		# parse selection parameters

		i=$(( ${selection} ))
		i=$(( ${i} * 2 ))

		name="${containers[i-2]}"
		version="${containers[i-1]}"

		distribution_name="${name}"
		distribution_version="${version}"

	fi

	# unset array

	containers=()

	# specify distribution selection variables

	distribution_name="${name}"
	distribution_version="${version}"

	CONTAINER_ROOT="${CONTAINER_BASE}"/"${distribution_name}"/"${distribution_version}"

	# specify container_directory for container input handling

	container_directory="${CONTAINER_BASE}"
}

container_input () {

	# no container root specified

	if [ -z "${container_directory}" ]
	then
		CONTAINER_BASE="${PREFIX}"/cnt
		CONTAINER_ROOT=("${CONTAINER_BASE}"/*/*)

		container_directory=("${CONTAINER_ROOT}")

		frobulator.wrn "Container directory not specified."
		echo

		container_parse
	fi

	# user specified invalid container root

	if [ ! -e "${container_directory}" ]
	then
		CONTAINER_BASE="${PREFIX}"/cnt
		CONTAINER_ROOT=("${CONTAINER_BASE}"/*/*)

		frobulator.err "Container directory not found."
		echo

		container_parse
	fi

	# user specified container root exists

	if [ -d "${container_directory}" ]
	then
		CONTAINER_BASE="${container_directory}"
		CONTAINER_ROOT=("${CONTAINER_BASE}"/*/*)

		frobulator.scs "Container directory found."
		echo
	fi
}

container_user () {

	# authentication

	frobulator.fwd "Authenticating${marker_elp}"
	echo

	# verify user existence:
	# loop through container's /etc/passwd file and make sure 'user' exists
	# source environment variables when 'user' corresponds to 'username'
	# default to 'root' if 'username' is invalid, is not specified or does not exist

	last_entry="$(tail -n 1 "${CONTAINER_ROOT}"/etc/passwd)"

	while read -r entry
	do
		IFS=':'

		read USER _ USER_ID GROUP_ID GECOS HOME SHELL <<< "${entry}"

		IFS=','

		read FULL_NAME ROOM_NUMBER WORK_PHONE HOME_PHONE USER_EMAIL <<< "${GECOS}"

		# reset IFS

		IFS=' '

		# verify login options and parameters

		# no user name specified

		if [[ -z "${user_name}" ]]
		then
			user_name="root"

			USER="root"

			USER_ID="0"
			GROUP_ID="0"

			UID="${USER_ID}"
			GID="${GROUP_ID}"

			if [ -d "${CONTAINER_ROOT}"/root ]
			then
				HOME="/root"
			else
				HOME="/"
			fi

			frobulator.wrn "No user name - Defaulting" "[ '${user_name}' ]"
			echo

			break
		fi

		# valid user name found

		if [[ "${user_name}" == "${USER}" ]]
		then
			USER="${user_name}"

			if [[ "${user_name}" == "root" ]]
			then
				frobulator.wrn "Valid user name - Superuser" "[ '${user_name}' ]"
				echo
			else
				frobulator.scs "Valid user name - Accessing" "[ '${user_name}' ]"
				echo
			fi

			break
		fi

		# user naem not found

		if [[ "${entry}" == "${last_entry}" ]]
		then

			frobulator.err "Invalid user name - Aborting" "[ '${user_name}' ]"
			echo

			exit 1
		fi

	done < "${CONTAINER_ROOT}"/etc/passwd
}

container_environment () {

	# generate container environment

	# set path:
	# in order of retreival

	CONTAINER_PATH=""

	# container

	[ -d "${CONTAINER_ROOT}"/usr/local/sbin ] && CONTAINER_PATH+="/usr/local/sbin:"
	[ -d "${CONTAINER_ROOT}"/usr/local/bin ]  && CONTAINER_PATH+="/usr/local/bin:"
	[ -d "${CONTAINER_ROOT}"/usr/sbin ]       && CONTAINER_PATH+="/usr/sbin:"
	[ -d "${CONTAINER_ROOT}"/usr/sbin ]       && CONTAINER_PATH+="/usr/bin:"
	[ -d "${CONTAINER_ROOT}"/sbin ]           && CONTAINER_PATH+="/sbin:"
	[ -d "${CONTAINER_ROOT}"/bin ]            && CONTAINER_PATH+="/bin:"

	# termux

	[ -d "${HOME}"/.local/bin ]               && CONTAINER_PATH+="${HOME}/.local/bin:"

	[ -d "${PREFIX}"/sbin ]                   && CONTAINER_PATH+="${PREFIX}/sbin:"
	[ -d "${PREFIX}"/bin ]                    && CONTAINER_PATH+="${PREFIX}/bin:"

	# android

	[ -d /system/sbin ]                       && CONTAINER_PATH+="/system/sbin:"
	[ -d /system/bin ]                        && CONTAINER_PATH+="/system/bin:"

	CONTAINER_PATH="${CONTAINER_PATH}"

	export CONTAINER_PATH="${CONTAINER_PATH}"

	return
}

container_intent () {

	# load session settings

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# generate container environment

	container_environment

	# setup 'proot' command arguments

	unset session_command

	session_command+="proot"
	session_command+=" --kill-on-exit"
	session_command+=" --link2symlink"
	session_command+=" --rootfs=${CONTAINER_ROOT}"
	session_command+=" --change-id=${USER_ID}:${GROUP_ID}"
	session_command+=" --pwd=${HOME}"

    [ -d "/apex" ]                                && session_command+=" --bind=/apex:/apex"
    [ -e "/linkerconfig/ld.config.txt" ]          && session_command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"

	# system directories

    [ -d "/data" ]                                && session_command+=" --bind=/data:/data"
    [ -d "/dev" ]                                 && session_command+=" --bind=/dev:/dev"
    [ -e "/dev/urandom" ]                         && session_command+=" --bind=/dev/urandom:/dev/random"
    [ -d "/proc" ]                                && session_command+=" --bind=/proc:/proc"
    [ -d "/proc/self/fd" ]                        && session_command+=" --bind=/proc/self/fd:/dev/fd"
    [ -e "/proc/self/fd/0" ]                      && session_command+=" --bind=/proc/self/fd/0:/dev/stdin"
    [ -e "/proc/self/fd/1" ]                      && session_command+=" --bind=/proc/self/fd/1:/dev/stdout"
    [ -e "/proc/self/fd/2" ]                      && session_command+=" --bind=/proc/self/fd/2:/dev/stderr"
    [ -d "/storage" ]                             && session_command+=" --bind=/storage:/storage"
    [ -d "/sys" ]                                 && session_command+=" --bind=/sys:/sys"
    [ -d "/system" ]                              && session_command+=" --bind=/system:/system"
    [ -d "/vendor" ]                              && session_command+=" --bind=/vendor:/vendor"

	[ -d "${PREFIX%/*}"/home ]                    && session_command+=" --bind=${PREFIX%/*}/home:${HOME}"
	[ -d "${PREFIX}"/media ]                      && session_command+=" --bind=${PREFIX}/media:/media"
	[ -d "${PREFIX}"/tmp ]                        && session_command+=" --bind=${PREFIX}/tmp:/tmp"

	# environment

    session_command+=" env"
    session_command+=" --ignore-environment"

    # android

	session_command+=" ANDROID_ART_ROOT=${ANDROID_ART_ROOT}"
	session_command+=" ANDROID_DATA=${ANDROID_DATA}"
	session_command+=" ANDROID_I18N_ROOT=${ANDROID_I18N_ROOT}"
	session_command+=" ANDROID_ROOT=${ANDROID_ROOT}"
	session_command+=" ANDROID_RUNTIME_ROOT=${ANDROID_RUNTIME_ROOT}"
	session_command+=" ANDROID_TZDATA_ROOT=${ANDROID_TZDATA_ROOT}"
	session_command+=" BOOTCLASSPATH=${BOOTCLASSPATH}"
	session_command+=" DEX2OATBOOTCLASSPATH=${DEX2OATBOOTCLASSPATH}"

	# termux

	session_command+=" PREFIX=${PREFIX}"
	session_command+=" TERMUX_BINARIES=${PREFIX}/bin"
	session_command+=" TERMUX_VERSION=${TERMUX_VERSION}"

	# container

	session_command+=" PATH=${PATH}:${CONTAINER_PATH}"
	session_command+=" COLORTERM=${COLORTERM}"
	session_command+=" DISPLAY=${DISPLAY}"
	session_command+=" DISPLAY_DRIVER=${DISPLAY_DRIVER}"
	session_command+=" HOME=${HOME}"
	session_command+=" LANG=${LANG}"
	session_command+=" LOCALHOST=${LOCALHOST}"
	session_command+=" SHELL=${SHELL}"
	session_command+=" TERM=${TERM}"
	session_command+=" TMPDIR=${TMPDIR}"
	session_command+=" USER=${USER}"
	session_command+=" XDG_CACHE_HOME=${HOME}/.cache"
	session_command+=" XDG_CONFIG_DIRS=/etc/xdg"
	session_command+=" XDG_CONFIG_HOME=${HOME}/.config"
	session_command+=" XDG_DATA_DIRS=/usr/local/share:/usr/share"
	session_command+=" XDG_DATA_HOME=${HOME}/.local/share"
	session_command+=" XDG_RUNTIME_DIR=/run/user/${USER_ID}"
	session_command+=" XDG_STATE_HOME=${HOME}/.local/state"
	session_command+=" XAUTHORITY=${XDG_RUNTIME_DIR}/Xauthority"

	# command

	session_command+=" ${@}"

	# execute 'proot' login

	${session_command}
}

container_display () {

	display_activity="${termux_x11_activity}"

	intent_command=()

	intent_command+=(am start)
	intent_command+=(--user 0)
	intent_command+=(-n ${display_activity})

	frobulator.silence "${intent_command[@]}"
}

container_session () {

	# load session

	frobulator.fwd "Loading desktop interface${marker_elp}"
	echo

	if [ -z "${environment}" ]
	then
		environment="$(cat ${HOME}/.dextop/dextop-environment)"
	fi

	if [ -z "${session}" ]
	then
		session="$(cat ${HOME}/.dextop/dextop-session)"
	fi

	if [ "${environment}" = "xfce" ]
	then
		window_manager="xfwm4"

	elif [ "${environment}" = "i3" ]
	then
		window_manager="i3"
	fi

	# pause:
	# required to let session loader through messaging system
	# and load graphical interface

	sleep 2

	# load desktop environment

	frobulator.silence "dbus-launch --exit-with-session ${session}" &
}

container_focus () {

	# define window manager

	if [ -z "${environment}" ]
	then
		environment="$(cat ${HOME}/.dextop/dextop-environment)"
	fi

	if [ -z "${session}" ]
	then
		session="$(cat ${HOME}/.dextop/dextop-session)"
	fi

	if [ "${environment}" = "xfce" ]
	then
		window_manager="xfwm4"

	elif [ "${environment}" = "i3" ]
	then
		window_manager="i3"
	fi

	# define default application

	if [ "${environment}" = "xfce" ]
	then
		application_default="xfce4-appfinder"

	elif [ "${environment}" = "i3" ]
	then
		application_default="dmenu_run"
	fi

	if [ "$application" = "" ]
	then
		frobulator.wrn "Application not specified" "[ N/A ]"
		echo

		application="${application_default}"

		frobulator.cpt "Loading default" "[ ${application} ]"
		echo
	fi

	if [ -z $(command -v "${application}") ]
	then
		frobulator.err "Application not found" "[ ${application} ]"
		echo

		application="${application_default}"

		frobulator.cpt "Loading default" "[ ${application} ]"
		echo

	else
		frobulator.scs "Application found" "[ ${application} ]"
		echo

		application="${application}"

		frobulator.cpt "Loading application" "[ ${application} ]"
		echo
	fi

	# timeout:
	# required to let session loader through messaging system
	# and load graphical interface

	frobulator.timeout

	# load desktop environment

	"${window_manager}" > "${sink}" 2>&1 &

	# load application

	frobulator.silence "${application}" &
}

display_clean_vnc () {

	# clean vnc runtime files:
	# prevents hangups and vnc process misfires

	if [ -d "${HOME}" ]
	then
		rm -r -f "${HOME}"/.ICE*
		rm -r -f "${HOME}"/.X11*
		rm -r -f "${HOME}"/.Xauth*
	fi

	if [ -d "${TMPDIR}" ]
	then
		rm -r -f "${TMPDIR}"/.ICE*
		rm -r -f "${TMPDIR}"/.X11*
		rm -r -f "${TMPDIR}"/.Xauth*
	fi
}

display_geometry_vnc () {

	# list supported display resolutions

	frobulator.msg "Select geometry or input [c]ustom properties:"
	echo

	monitors=(
		VGA		 0640    0480
		WVGA	 0768    0480
		SVGA	 0800    0600
		FWVGA	 0854    0480
		qHD		 0960    0540
		DVGA	 0960    0640
		WSVGA	 1024    0576
		WSVGA	 1024    0600
		XGA		 1024    0768
		XGA+	 1152    0864
		HD		 1280    0720
		WXGA	 1366    0768
		WXGA+	 1440    0900
		HD+		 1600    0900

		SXGA	 1280    1024
		SXGA+	 1400    1050
		UXGA	 1600    1200
		WSXGA+	 1680    1050
		FHD		 1920    1080
		WUXGA	 1920    1200
		DCI2K	 2048    1080
		QWXGA	 2048    1152
		QXGA	 2048    1536
		UWFHD	 2560    1080
		QHD		 2560    1440
		WQXGA	 2560    1600
		QSXGA	 2560    2048
		QHD+	 3200    1800
		WQSXGA	 3200    2048
		QUXGA	 3200    2400
		UWQHD	 3440    1440
		UW4K	 3840    1600
		4KUHD	 3840    2160
		WQUXGA	 3840    2400
		DCI4K	 4096    2160
		UW5K	 5120    2160
		5K		 5120    2880
		8KUHD	 7680    4320
	)

	phones=(
		GN6P	 2560    1440
		GN6		 2560    1440
		GN5X	 1920    1080
		GN5		 1920    1080
		GP5		 2340    1080
		GP4XL	 3040    1440
		GP4a	 2340    1080
		GP4		 2280    1080
		GP3aXL	 2160    1080
		GP3a	 2220    1080
		GP3XL	 2960    1440
		GP3		 2160    1080
		GP2XL	 2880    1440
		GP2		 1920    1080
		GPXL	 2560    1440
		GP		 1920    1080

		SGN20+	 3088    1440
		SGN20	 3200    1440
		SGN10+	 3040    1440
		SGN10	 2280    1080
		SGN9	 2960    1440
		SGN8	 2960    1440
		SGN7	 2560    1440

		SGS10+	 3040    1440
		SGS10	 3040    1440
		SGS9+	 2960    1440
		SGS9	 2960    1440
		SGS8+	 2960    1440
		SGS8	 2960    1440
		SGS7E	 2560    1440
		SGS7	 2560    1440
		SGS6E+	 2560    1440
		SGS6E	 2560    1440
		SGS6	 2560    1440
	)

	tablets=(
		GN9	     2048    1536
		GN7-2013 1920    1200
		GPC	     2560    1800

		SGTS7+	 2800    1752
		SGTS7	 2560    1600
		SGTS6	 2560    1600
		SGTS5E	 2560    1600
		)

	devices=(
		${phones[@]}
		${tablets[@]}
	)

	geometries=(
		${monitors[@]}
		${devices[@]}
	)

	# set padding for uniform output

	pad_length=10

	# continue list using array selection of suppported values

	for (( i=0 ; i<${#geometries[@]} ; i+=3 ))
	do
		format="${geometries[$i]}"
		width="${geometries[$i+1]}"
		height="${geometries[$i+2]}"
		geometry="${width}x${height}"

		number=$(( ( $i / 3 ) + 1 ))

		if (( $i / 3 >= 0 && $i / 3 <= 8 ))
		then
			# handle number spacing for entries 1-9

			printf '      [  %s ] %s' ${number} ${format}
		else
			# handle number spacing for entries 10+

			printf '      [ %s ] %s' ${number} ${format}
		fi

		printf '%*s' $(( pad_length - ${#format} ))
		printf '%s\n' ${geometry}
	done

	printf '\n'
}

display_selection_vnc () {

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	frobulator_return=()

	if [ -f "${HOME}"/.vnc/selection ]
	then
		selection=$(cat "${HOME}"/.vnc/selection)
	else
		frobulator.input ${values_list[@]}
	fi

	eval ${frobulator_return[@]}

	# check selection input against selection list

	while true
	do
		# range check:
		# selection input must be in provided range and an integer

		if [[ "${selection}" -lt 1           ]] || \
		   [[ "${selection}" -gt "${number}" ]] || \
		   [[ ! "${selection}" =~ ^[0-9]+$   ]]
		then
			echo
			frobulator.err "Invalid selection:"
			echo

			frobulator.wrn "Select geometry [ 1 - ${number} ] or input [c]ustom properties."
			echo

			frobulator.ipt "Selection:"

			frobulator.read selection
		else
			break
		fi

		if [[ "${selection}" = [cC] ]]
		then
			selection=custom

			break
		fi
	done

	unset geometry

	# integer check:
	# handle numerical selection

	if [[ "${selection}" =~ ^[0-9]+$ ]]
	then
		i=$(( ${selection} ))
		i=$(( $i * 3 ))

		format="${geometries[$i-3]}"
		width="${geometries[$i-2]}"
		height="${geometries[$i-1]}"
		geometry="${width}x${height}"
	fi

	# handle custom selection

	if [[ "${selection}" = "custom" ]]
	then
		frobulator.fwd "Setting custom properties${marker_elp}"
		echo

		frobulator.ipt "Set width" "[ pixels ]"

		frobulator.read width

		frobulator.ipt "Set height" "[ pixels ]"

		frobulator.read height

		frobulator.ipt "Set display number" "[ e.g. 1 ]"

		frobulator.read display

		format="Custom"
		geometry="${width}x${height}"

		DISPLAY=":${display}"
		DISPLAY_NUMBER="${DISPLAY/:/}"
		PORT="590${DISPLAY_NUMBER}"
	fi
}

display_password_vnc () {

	# handle vnc session password generation

	# values #

	values_list=(
		display_password
	)

	# handle user input for values_list

	frobulator_return=()

	frobulator.input ${values_list[@]}

	eval ${frobulator_return[@]}

	# hash password  using 'vncpasswd' and store it

	frobulator.fwd "Setting password${marker_elp}"
	echo

	echo "${display_password}" | vncpasswd -f > "${HOME}"/.vnc/passwd

	frobulator.scs "Password changed."
	echo
}

display_framebuffer_vnc () {

	# generate vnc framebuffer

	frobulator.fwd "Generating framebuffer${marker_elp}"
	echo

	unset framebuffer_command

	framebuffer_command+="Xvfb"
	framebuffer_command+=" -screen ${DISPLAY_NUMBER}"
	framebuffer_command+=" ${geometry}x24"

	${framebuffer_command} > "${sink}" 2>&1 &
}

display_initialize_vnc () {

	# initilaize vnc session and parameters

	# make selection available for automatic start:
	# verify user id - do not write selection when 'root' user is logged in

	if [[ $(id -u -n) = "root" ]]
	then
		:
	else
		# integer check:
		# do not write non numerical values to file

		if [[ "${selection}" =~ ^[0-9]+$ ]]
		then
			if [ ! -d "${HOME}"/.vnc ]
			then
				mkdir -p "${HOME}"/.vnc
			fi

			echo "${selection}" > "${HOME}"/.vnc/selection
			echo "${format}"    > "${HOME}"/.vnc/format
			echo "${geometry}"  > "${HOME}"/.vnc/geometry
		fi
	fi

	# genrate vnc display framebuffer

	display_framebuffer_vnc
}

display_server_vnc () {

	# start vnc display server

	server_command+="x11vnc"
	server_command+=" -display ${DISPLAY}"
	server_command+=" -clip xinerama=${DISPLAY}"
	server_command+=" -rfbport ${PORT}"
	server_command+=" -scale 1.00"
	server_command+=" -xkb"
	server_command+=" -nocursor"
	server_command+=" -nocursorshape"
	server_command+=" -noshm"
	server_command+=" -noxdamage"
	server_command+=" -noxfixes"
	server_command+=" -noxrecord"

	${server_command} > "${sink}" 2>&1 &

}

display_intent_vnc () {

	# start vnc display activity

	# explicit VNC viewer application to kill:
	# used when vnc is stopped or restarted using vnc:// intent
	# when launched via the activity manager
	# [ 'am start -d {URI} -S {ACTIVITY}' ]

	# start android vnc intent and force-stop existing activity

	# frobulator.silence "am start
	#						--user 0
	#						-a android.intent.action.VIEW
	#						-d vnc://${ADDRESS}:${PORT}
	#						-S ${display_activity}"

	display_activity="${vnc_activity}"

	unset intent_command

	intent_command+="am start"
	intent_command+=" --user 0"
	intent_command+=" -a android.intent.action.VIEW"
	intent_command+=" -d vnc://${ADDRESS}:${PORT}"
	intent_command+=" -S ${display_activity}"

	frobulator.silence "${intent_command}"

}

display_start_vnc () {

	if [[ $(pgrep -f  x11vnc) ]]
	then
		:
	else
		# handle display geometry selection

		if [ -f "${HOME}"/.vnc/selection ]
		then
			# hide if selection file is present

			display_geometry_vnc > "${sink}" 2>&1
		else
			# show if selection file is not present

			display_geometry_vnc
		fi

		# handle vnc selections

		display_selection_vnc

	fi

	# initialize vnc parameters

	display_initialize_vnc

	# start vnc display server

	display_server_vnc

	# load vnc viewer intent

	display_intent_vnc
}

display_stop_vnc () {

	# look for corresponding server process:
	# stop display server and clean runtime files

	if [[ $(pgrep -f  Xvfb) ]]
	then
		# framebuffer

		pkill -f Xvfb  > "${sink}" 2>&1 &

		frobulator.process "Stopping display framebuffer"

	elif [[ $(pgrep -f  x11vnc) ]]
	then
		# vnc

		x11vnc -R stop > "${sink}" 2>&1 &

		frobulator.process "Stopping display server"

		wait

		# clean display server runtime files

		display_clean_vnc &

		frobulator.process "Removing display runtime files"

	else
		frobulator.wrn "No active display server detected."
		echo

		frobulator.fwd "Exiting${marker_elp}"
		echo
	fi
}

display_server_x11 () {

	# start x11 display server

	GALLIUM_DRIVER="${TERMUX_X11_DRIVER}"

	export GALLIUM_DRIVER="${GALLIUM_DRIVER}"

	if [[ $(pgrep -f dbus) ]]
	then
		pkill -f dbus
	fi

	if [[ $(pgrep -f "${TERMUX_X11_ACCELERATOR}") ]]
	then
		pkill -f "${TERMUX_X11_ACCELERATOR}"
	fi

	frobulator.silence "${TERMUX_X11_ACCELERATOR}" &

	if [[ $(pgrep -f "${TERMUX_X11_APPLICATION}") ]]
	then
		:
	else
		frobulator.silence "${TERMUX_X11_SERVER} ${DISPLAY}" &
	fi
}

display_intent_x11 () {

	# start x11 display activity

	frobulator.fwd "Opening display${marker_elp}"
	echo

	display_activity="${termux_x11_activity}"

	unset intent_command

	intent_command+="am start"
	intent_command+=" --user 0"
	intent_command+=" -n ${display_activity}"

	frobulator.silence "${intent_command}" &
}

display_start_x11 () {

	display_server_x11

	display_intent_x11
}

display_stop_x11 () {

	# stop display server and activity

	if [[ $(pgrep -f "${TERMUX_X11_APPLICATION}") ]]
	then
		pkill -f "${TERMUX_X11_APPLICATION}"

		display_activity="${termux_x11_activity_stop}"

		intent_command=()

		intent_command+=(am broadcast)
		intent_command+=(--user 0)
		intent_command+=(-a ${display_activity})

		frobulator.silence "${intent_command[@]}" &

		frobulator.process "Stopping display viewer"
	else
		frobulator.wrn "No active display process detected."
		echo

		frobulator.fwd "Exiting${marker_elp}"
		echo
	fi
}

display_list () {

	if [[ "${display}" = [vV][nN][cC] ]]
	then
		display_server="x11vnc"

		display_format=$(cat "${HOME}"/.vnc/format)
		display_geometry=$(cat "${HOME}"/.vnc/geometry)
		display_display=${DISPLAY}
		display_process=$(pidof $(echo "${display_server}"))
		display_port="${PORT}"
	fi

	if [[ "${display}" = [xX][1][1] ]]
	then
		display_server="app_process / com.termux.x11.Loader"

		display_format="native"
		display_geometry="native"
		display_display=${DISPLAY}
		display_process=$(pidof $(echo "${display_server}"))
		display_port="default"
	fi

	if [[ $(pidof "${display_server}") ]]
	then
		frobulator.fwd "Listing session details${marker_elp}"
		echo

		display_format="${display_format}"
		display_geometry="${display_geometry}"
		display_display="${display_display}"
		display_process="${display_process}"
		display_port="${display_port}"
	else
		frobulator.wrn "No active servers detected."
		echo

		empty="N/A"

		display_format="${empty}"
		display_geometry="${empty}"
		display_display="${empty}"
		display_process="${empty}"
		display_port="${empty}"
	fi

	frobulator.inf "Format"   "[ ${display_format} ]"
	frobulator.inf "Geometry" "[ ${display_geometry} ]"
	frobulator.inf "Display"  "[ ${display_display} ]"
	frobulator.inf "Process"  "[ ${display_process} ]"
	frobulator.inf "Port"     "[ ${display_port} ]"
	echo
}

if [ "${option}" = "start" ]
then
	# start display session

	display_start_x11

	# load session

	container_session
fi

if [ "${option}" = "stop" ]
then
	# stop display session

	display_stop_x11
fi

if [ "${option}" = "list" ]
then
	# list display server information

	display_list
fi

if [ "${option}" = "username" ]
then
	# handle manual container directory input

	container_input

	# validate username

	container_user

	# start container session

	container_intent "${SHELL}"
fi

if [ "${option}" = "directory" ]
then
	# handle manual container directory input

	container_input

	# validate username

	container_user

	# start container session

	container_intent "${SHELL}"
fi

if [ "${option}" = "focus" ]
then
	# start display session

	display_start_x11

	# load application

	container_focus
fi
