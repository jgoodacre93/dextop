#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="08-18-2024"

# usage ////////////////////////////////////////////////////////////////////////

while (($#))
do
	case "${1}"
	in
		-o|--start)
			option="start"
		;;

		-x|--stop)
			option="stop"
		;;

		-u|--username)
			option="username"
			user_name="${2}"

			shift
		;;

		-r|--root)
			option="root"
			root_filesystem="${2}"

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -u [User Name] | -a [Application] | -n [Selection] | [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-o, --start          Start display session."
			echo
			echo -e "-x, --stop           Stop display session."
			echo
			echo -e "-a, --application    Specify application to start on session login."
			echo
			echo -e "-u, --username       Specify user name for session login."
			echo
			echo -e "-r, --root           Specify root filesystem directory."
			echo
			echo -e "-h, --help           Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

			"")
				# handle empty argument:
				# use default values specified in script

				:
			;;

		*)
			echo
			echo -e "Usage: ${script} -o [Display Server] | -u [User Name] | -a [Application] | -n [Selection] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;

	esac

	shift

done

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

termux_x11_activity="com.termux.x11/.MainActivity"
termux_x11_activity_stop="com.termux.x11.ACTION_STOP"

TERMUX_X11_APPLICATION="com.termux.x11"
TERMUX_X11_SERVER="termux-x11"
TERMUX_X11_DRIVER="virpipe"
TERMUX_X11_ACCELERATOR="virgl_test_server_android"

# defaults /////////////////////////////////////////////////////////////////////

if [ -z "${COLORTERM}" ]
then
	COLORTERM="truecolor"
fi

if [ -z "${TERM}" ]
then
	TERM="xterm-256color"
fi

if [ -z "${TMPDIR}" ]
then
	TMPDIR="${TMPDIR}"
fi

if [ -z "${LANG}" ]
then
	LANG="${LANG}"
fi

if [ -z "${SHELL}" ]
then
	SHELL="/bin/bash"
fi

if [ -z "${DISPLAY}" ]
then
	DISPLAY=":0"
fi

if [ -f /etc/os-release ]
then
	. /etc/os-release

	name="${NAME}"
fi

# exports //////////////////////////////////////////////////////////////////////

export TERMUX_X11_APPLICATION="${TERMUX_X11_APPLICATION}"
export TERMUX_X11_SERVER="${TERMUX_X11_SERVER}"
export TERMUX_X11_DRIVER="${TERMUX_X11_DRIVER}"
export TERMUX_X11_ACCELERATOR="${TERMUX_X11_ACCELERATOR}"

# functions ////////////////////////////////////////////////////////////////////

container_handle () {

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	frobulator_return=()

	if [ -f "${HOME}"/.dextop/selection ]
	then
		selection=$(cat "${HOME}"/.dextop/selection)
	else
		frobulator.input ${values_list[@]}
	fi

	eval ${frobulator_return[@]}

	# check selection input against selection list

	while true
	do
		# range check:
		# selection input must be in provided range and an integer

		if [[ "${selection}" -lt 1           ]] || \
		   [[ "${selection}" -gt "${number}" ]] || \
		   [[ ! "${selection}" =~ ^[0-9]+$   ]]
		then
			echo
			frobulator.err "Invalid selection:"
			echo

			frobulator.wrn "Select container [ 1 - ${number} ]"
			echo

			frobulator.ipt "Selection:"

			frobulator.read selection
		else
			break
		fi
	done

	distribution_name="${name}"
	distribution_version="${version}"

	CONTAINER_ROOT="${PREFIX}"/cnt/"${distribution_name}"/"${distribution_version}"

}

container_root () {

	# set container root directory

	CONTAINER_ROOT=("${PREFIX}"/cnt/*/*)

	# single container

	if [[ ${#CONTAINER_ROOT[@]} -eq 1 ]]
	then
		CONTAINER_ROOT=("${PREFIX}"/cnt/*/*)
	fi

	# multiple containers:
	# parse container directories

	if [[ ${#CONTAINER_ROOT[@]} -ge 2 ]]
	then
		for distribution in "${PREFIX}"/cnt/*
		do
			for version in "${distribution}"/*
			do
				distribution_name=$(basename $distribution)

				distribution_version=$(basename $version)

				containers+=($distribution_name $distribution_version)
			done
		done

		# set padding for uniform output

		pad_length=10

		# continue list using array selection of suppported values

		for (( i=0 ; i<${#containers[@]} ; i+=2 ))
		do
			name="${containers[$i]}"
			version="${containers[$i+1]}"
			container="${name} ${version}"

			number=$((($i/2) + 1))

			if (( $i/2 >= 0 && $i/2 <= 8 ))
			then
				# handle number spacing for entries 1-9

				printf '      [  %s ] %s ' ${number} ${name}
			else
				# handle number spacing for entries 10+

				printf '      [ %s ] %s ' ${number} ${name}
			fi

			printf '%*s' $((pad_length - ${#name}))
			printf '%s\n' ${version}
		done

		printf '\n'

		container_handle
	fi
}

container_input () {

	if [ -d "${root_filesystem}" ]
	then
		CONTAINER_ROOT="${root_filesystem}"

		frobulator.scs "Container location found."
		echo

		frobulator.inf "Loading" "[ ${CONTAINER_ROOT} ]"
		echo
	else
		frobulator.err "Container location not found."
		echo

		frobulator.ipt "Select one of the following containers:"
		echo

		container_handle
	fi
}

container_user () {

	# authentication

	frobulator.fwd "Authenticating${marker_elp}"
	echo

	# verify user existence:
	# loop through container's /etc/passwd file and make sure 'user' exists
	# source environment variables when 'user' corresponds to 'username'
	# default to 'root' if 'username' is invalid, is not specified or does not exist

	last_entry="$(tail -n 1 "${CONTAINER_ROOT}"/etc/passwd)"

	while read -r entry
	do
		IFS=':'

		read USER _ USER_ID GROUP_ID GECOS HOME SHELL <<< "${entry}"

		IFS=','

		read FULL_NAME ROOM_NUMBER WORK_PHONE HOME_PHONE USER_EMAIL <<< "${GECOS}"

		# reset IFS

		IFS=' '

		# verify login options and parameters

		# no user name specified

		if [[ -z "${user_name}" ]]
		then
			user_name="root"

			USER="root"

			USER_ID="0"
			GROUP_ID="0"

			UID="${USER_ID}"
			GID="${GROUP_ID}"

			if [ -d "${CONTAINER_ROOT}"/root ]
			then
				HOME="/root"
			else
				HOME="/"
			fi

			frobulator.wrn "No user name - Defaulting" "[ '${user_name}' ]"
			echo

			break
		fi

		# valid user name found

		if [[ "${user_name}" == "${USER}" ]]
		then
			USER="${user_name}"

			if [[ "${user_name}" == "root" ]]
			then
				frobulator.wrn "Valid user name - Superuser" "[ '${user_name}' ]"
				echo
			else
				frobulator.scs "Valid user name - Accessing" "[ '${user_name}' ]"
				echo
			fi

			break
		fi

		# user naem not found

		if [[ "${entry}" == "${last_entry}" ]]
		then

			frobulator.err "Invalid user name - Aborting" "[ '${user_name}' ]"
			echo

			exit 1
		fi

	done < "${CONTAINER_ROOT}"/etc/passwd
}

container_environment () {

	# generate container environment

	CONTAINER_ROOT="${PREFIX}"/cnt/debian/12

	# set path:
	# in order of retreival

	CONTAINER_PATH=""

	# container

	[ -d "${CONTAINER_ROOT}"/usr/local/sbin ] && CONTAINER_PATH+="/usr/local/sbin:"
	[ -d "${CONTAINER_ROOT}"/usr/local/bin ]  && CONTAINER_PATH+="/usr/local/bin:"
	[ -d "${CONTAINER_ROOT}"/usr/sbin ]       && CONTAINER_PATH+="/usr/sbin:"
	[ -d "${CONTAINER_ROOT}"/usr/sbin ]       && CONTAINER_PATH+="/usr/bin:"
	[ -d "${CONTAINER_ROOT}"/sbin ]           && CONTAINER_PATH+="/sbin:"
	[ -d "${CONTAINER_ROOT}"/bin ]            && CONTAINER_PATH+="/bin:"

	# termux

	[ -d "${HOME}"/.local/bin ]               && CONTAINER_PATH+="${HOME}/.local/bin:"

	[ -d "${PREFIX}"/sbin ]                   && CONTAINER_PATH+="${PREFIX}/sbin:"
	[ -d "${PREFIX}"/bin ]                    && CONTAINER_PATH+="${PREFIX}/bin:"

	# android

	[ -d /system/sbin ]                       && CONTAINER_PATH+="/system/sbin:"
	[ -d /system/bin ]                        && CONTAINER_PATH+="/system/bin:"

	CONTAINER_PATH="${CONTAINER_PATH}"

	export CONTAINER_PATH="${CONTAINER_PATH}"

	return
}

container_intent () {

	# load session settings

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# generate container environment

	container_environment

	# setup 'proot' command arguments

	unset session_command

	session_command+="proot"
	session_command+=" --kill-on-exit"
	session_command+=" --link2symlink"
	session_command+=" --rootfs=${CONTAINER_ROOT}"
	session_command+=" --change-id=${USER_ID}:${GROUP_ID}"
	session_command+=" --pwd=${HOME}"

    [ -d "/apex" ]                                && session_command+=" --bind=/apex:/apex"
    [ -e "/linkerconfig/ld.config.txt" ]          && session_command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"

	# system directories

    [ -d "/data" ]                                && session_command+=" --bind=/data:/data"
    [ -d "/dev" ]                                 && session_command+=" --bind=/dev:/dev"
    [ -e "/dev/urandom" ]                         && session_command+=" --bind=/dev/urandom:/dev/random"
    [ -d "/proc" ]                                && session_command+=" --bind=/proc:/proc"
    [ -d "/proc/self/fd" ]                        && session_command+=" --bind=/proc/self/fd:/dev/fd"
    [ -e "/proc/self/fd/0" ]                      && session_command+=" --bind=/proc/self/fd/0:/dev/stdin"
    [ -e "/proc/self/fd/1" ]                      && session_command+=" --bind=/proc/self/fd/1:/dev/stdout"
    [ -e "/proc/self/fd/2" ]                      && session_command+=" --bind=/proc/self/fd/2:/dev/stderr"
    [ -d "/storage" ]                             && session_command+=" --bind=/storage:/storage"
    [ -d "/sys" ]                                 && session_command+=" --bind=/sys:/sys"
    [ -d "/system" ]                              && session_command+=" --bind=/system:/system"
    [ -d "/vendor" ]                              && session_command+=" --bind=/vendor:/vendor"

	[ -d "${PREFIX%/*}"/home ]                    && session_command+=" --bind=${PREFIX%/*}/home:${HOME}"
	[ -d "${PREFIX}"/media ]                      && session_command+=" --bind=${PREFIX}/media:/media"
	[ -d "${PREFIX}"/tmp ]                        && session_command+=" --bind=${PREFIX}/tmp:/tmp"

	# environment

    session_command+=" env"
    session_command+=" --ignore-environment"

	session_command+=" PREFIX=${PREFIX}"
	session_command+=" TERMUX_BINARIES=${PREFIX}/bin"
	session_command+=" PATH=${PATH}:${CONTAINER_PATH}"
	session_command+=" COLORTERM=${COLORTERM}"
	session_command+=" DISPLAY=${DISPLAY}"
	session_command+=" DISPLAY_DRIVER=${DISPLAY_DRIVER}"
	session_command+=" HOME=${HOME}"
	session_command+=" LANG=${LANG}"
	session_command+=" SHELL=${SHELL}"
	session_command+=" TERM=${TERM}"
	session_command+=" TMPDIR=${TMPDIR}"
	session_command+=" USER=${USER}"
	session_command+=" XDG_CACHE_HOME=${HOME}/.cache"
	session_command+=" XDG_CONFIG_DIRS=/etc/xdg"
	session_command+=" XDG_CONFIG_HOME=${HOME}/.config"
	session_command+=" XDG_DATA_DIRS=/usr/local/share:/usr/share"
	session_command+=" XDG_DATA_HOME=${HOME}/.local/share"
	session_command+=" XDG_RUNTIME_DIR=/run/user/${USER_ID}"
	session_command+=" XDG_STATE_HOME=${HOME}/.local/state"
	session_command+=" XAUTHORITY=${XDG_RUNTIME_DIR}/Xauthority"

	# command

	session_command+=" ${@}"

	# execute 'proot' login

	${session_command}
}

container_display () {

	display_activity="${termux_x11_activity}"

	unset intent_command

	intent_command+="am start"
	intent_command+=" --user 0"
	intent_command+=" -n ${display_activity}"

	frobulator.silence "${intent_command}"
}

container_session () {

	# load session

	frobulator.fwd "Loading desktop interface${marker_elp}"
	echo

	if [ -z "${environment}" ]
	then
		environment="$(cat ${HOME}/.dextop/dextop-environment)"
	fi

	if [ -z "${session}" ]
	then
		session="$(cat ${HOME}/.dextop/dextop-session)"
	fi

	# load desktop environment

	frobulator.silence "dbus-launch --exit-with-session ${session} &"
}

display_start () {

	if [[ $(pgrep -f proot) ]]
	then
		GALLIUM_DRIVER="${TERMUX_X11_DRIVER}"

		export GALLIUM_DRIVER="${GALLIUM_DRIVER}"
	fi

	if [[ $(pgrep -f "${TERMUX_X11_ACCELERATOR}") ]]
	then
		:
	else
		"${TERMUX_X11_ACCELERATOR}" 2>&1 "${sink}" &
	fi

	if [[ $(pgrep -f "${TERMUX_X11_APPLICATION}") ]]
	then
		:
	else
		"${TERMUX_X11_SERVER}" "${DISPLAY}" 2>&1 "${sink}" &
	fi

	frobulator.fwd "Opening display${marker_elp}"
	echo

	display_activity="${termux_x11_activity}"

	unset intent_command

	intent_command+="am start"
	intent_command+=" --user 0"
	intent_command+=" -n ${display_activity}"

	frobulator.silence "${intent_command}"
}

display_stop () {

	# handle and stop display server

	if [[ $(pgrep -f "${TERMUX_X11_APPLICATION}") ]]
	then
		display_activity="${termux_x11_activity_stop}"

		unset intent_command

		intent_command+="am broadcast"
		intent_command+=" --user 0"
		intent_command+=" -a ${display_activity}"

		frobulator.silence "${intent_command}" &

		frobulator.process "Stopping display viewer"

	else
		frobulator.wrn "No active display process detected."
		echo

		frobulator.fwd "Exiting${marker_elp}"
		echo
	fi
}

if [ "${option}" = "start" ]
then
	# start display session

	display_start

	# load session

	container_session
fi

if [ "${option}" = "stop" ]
then
	# stop display session

	if [[ $(pgrep -f proot) ]]
	then
		:
	else
		display_stop
	fi
fi

if [ "${option}" = "username" ]
then
	# validate root filesystem

	container_root

	# validate username

	container_user

	# start container session

	container_intent "${SHELL}"
fi

if [ "${option}" = "root" ]
then
	# handle manual container location input

	container_input

	# validate root filesystem

	container_root

	# validate username

	container_user

	# start container session

	container_intent "${SHELL}"
fi
