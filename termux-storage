#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		 SUDO_HOME=/root

		 USER="${SUDO_USER}"

		 HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		 yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		 mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="05-25-2024"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

storage_intent () {

	unset storage_command

	storage_command+="am broadcast"
	storage_command+=" -e com.termux.app.reload_style storage"
	storage_command+=" -a com.termux.app.reload_style com.termux"

	frobulator.silence "${storage_command}"
}

# verify termux storage directory existence

if [ ! -d "${HOME}"/storage ]
then
	# does not exist:
	# enable storage permissions: requires user touch input

	frobulator.wrn "User permission required to access storage on this device:"
	frobulator.nul "Internal and external storage locations are made available."
	echo

	frobulator.inf "Storage is made accessible through container."
	echo

	frobulator.ins "Select 'Allow' when prompted to proceed."
	echo

	frobulator.separate

	# storage permissions dialog

	storage_intent

	frobulator.countdown 5 "Continuing" "[ ${script} ]"

else
	# exists:
	# proceed with setup

	frobulator.scs "Storage directory detected" "[ "${HOME}" ]"
	echo

	frobulator.fwd "Continuing${marker_elp}"
	echo
fi

frobulator.fwd "Setting up storage${marker_elp}"
echo

# handle storage mount locations

if [ -d "${HOME}"/storage ]
then
    frobulator.delete "${HOME}"/storage
fi

directories_list=(
	"${PREFIX}"/media
	"${PREFIX}"/storage
)

for directory in ${directories_list[@]}
do
	if [ -d "${directory}" ]
	then
		for item in "${directory}"/*
		do
			frobulator.delete "${item}"
		done
	fi
done

# generate symbolic links

# link internal storage

frobulator.fwd "Linking${marker_elp}"
echo

if [ -d /storage/emulated/0 ]
then
	for directory in ${directories_list[@]}
	do
		if [ ! -f "${directory}"/internal ]
		then
			frobulator.link /storage/emulated "${directory}" 0 Android
		fi
	done
fi

directories_list=()

# link external storage

# use /proc/mounts to detect mounted media:
# circumvent /storage access issues and DAC policy (Android 11+)

commands_list=(
	$(cat /proc/mounts | sed -r '/[A0-Z9]{4}[-][A0-Z9]{4}/!d' | grep '/storage' | cut -d ' ' -f 2)
	$(cat /proc/mounts | sed -r '/[A0-Z9]{40}/!d' | grep '/storage' | cut -d ' ' -f 2)
)

# set IFS

IFS=$'\n'

for command in ${commands_list[@]}
do
	read -r -a storage_mounts_list <<< ${command}

	for storage_mount in ${storage_mounts_list[@]}
	do
		 storage_paths_list+=("${storage_mount}")
	done
done

if [ -n "${#storage_paths_list[@]}" ]
then
	for storage_path in ${storage_paths_list[@]}
	do
		storage_uuid="${storage_path/\/storage\//}"

		if [ -f "${storage_path}"/.storage ]
		then
			storage_label=$(cat ${storage_path}/.storage)
		else
			frobulator.wrn "No storage identifier found" "[ ${storage_uuid} ]"
			echo
			
			frobulator.inf "Using mouts UUID for identification"
			echo
			
			frobulator.fwd "Proceeding${marker_elp}"
			echo
		fi

		frobulator.scs "Storage media detected" "[ ${storage_uuid} ]"
		echo

		if [ ! -f "${PREFIX}"/media/"${storage_label}" ]
		then
			frobulator.link /storage "${PREFIX}"/media "${storage_uuid}" "${storage_label}"
		fi

		if [ ! -f "${PREFIX}"/media/"${storage_label}" ]
		then
			frobulator.link /storage "${PREFIX}"/storage "${storage_uuid}" "${storage_label}"
		fi

	done

else
	storage_uuid="N/A"

	frobulator.err "No storage media detected" "[ ${storage_uuid} ]"
	echo

	frobulator.fwd "Continuing${marker_elp}"
	echo
fi

# reset IFS

IFS=''
